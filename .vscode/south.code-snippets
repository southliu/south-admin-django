{
  "demoUrls": {
    "prefix": "demoUrls",
    "description": "urls代码片段",
    "body": [
        "from django.urls import path",
        "",
        "from . import views",
        "",
        "urlpatterns = [",
        "    path('page', views.page, name='page'),",
        "    path('create', views.create, name='create'),",
        "    path('<int:id>', views.delete, name='delete'),",
        "    path('update/<int:id>', views.update, name='update'),",
        "    path('detail', views.detail, name='detail'),",
        "]",
    ],
  },
  "demoModels": {
    "prefix": "demoModels",
    "description": "models代码片段",
    "body": [
      "from django.db import models",
      "from django.utils import timezone",
      "from rest_framework import serializers",
      "",
      "class XXX(models.Model):",
      "    id = models.BigAutoField(primary_key=True, verbose_name='ID')",
      "    name = models.CharField(max_length=100, unique=True, verbose_name='名称')",
      "    remark = models.CharField(max_length=200, null=True, blank=True, verbose_name='备注')",
      "    created_at = models.DateTimeField(default=timezone.now, verbose_name='创建时间')",
      "    updated_at = models.DateTimeField(auto_now=True, verbose_name='更新时间')",
      "    created_user = models.CharField(max_length=100, null=True, blank=True, verbose_name='创建者')",
      "    updated_user = models.CharField(max_length=100, null=True, blank=True, verbose_name='更新者')",
      "",
      "    # 添加软删除标识字段",
      "    is_deleted = models.IntegerField(default=0, verbose_name='是否删除')",
      "    deleted_at = models.DateTimeField(null=True, blank=True, verbose_name='删除时间')",
      "",
      "    class Meta:",
      "        db_table = 'xxx'",
      "        verbose_name = 'xx'",
      "        verbose_name_plural = 'xx管理'",
      "        app_label = 'xxx'  # 显式声明app_label",
      "        ",
      "    def __str__(self):",
      "        return self.name",
      "        ",
      "    # 重写delete方法实现软删除",
      "    def delete(self, using=None, keep_parents=False):",
      "        self.is_deleted = 1",
      "        self.deleted_at = timezone.now()",
      "        self.save()",
      "    ",
      "    # 真实删除方法",
      "    def hard_delete(self, using=None, keep_parents=False):",
      "        super(XXX, self).delete(using, keep_parents)",
      "    ",
      "    # 恢复被软删除的记录",
      "    def restore(self):",
      "        self.is_deleted = 0",
      "        self.deleted_at = None",
      "        self.save()",
      "",
      "",
      "class XXXSerializer(serializers.ModelSerializer):",
      "    class Meta:",
      "        model = XXX",
      "        fields = '__all__'",
    ],
  },
  "demoViews": {
    "prefix": "demoViews",
    "description": "views代码片段",
    "body": [
      "from django.views.decorators.csrf import csrf_exempt",
      "from .models import XXX",
      "from common.decorators import auth_required",
      "from common.responses import success_response, error_response, model_to_dict, paginate_response",
      "",
      "# 分页接口",
      "@csrf_exempt",
      "@auth_required('GET')",
      "def page(request):",
      "    try:",
      "        # 获取查询参数",
      "        page = int(request.GET.get('page', 1))",
      "        page_size = int(request.GET.get('pageSize', 10))",
      "        name = request.GET.get('name', '').strip()",
      "",
      "        # 构建查询条件，只显示未被软删除的",
      "        result = XXX.objects.filter(is_deleted=0)",
      "        ",
      "        # 根据名称进行过滤",
      "        if name:",
      "            result = result.filter(name__icontains=name)",
      "",
      "        # 获取总数",
      "        total = result.count()",
      "",
      "        # 分页处理",
      "        start_index = (page - 1) * page_size",
      "        end_index = start_index + page_size",
      "        paginated_result = result[start_index:end_index]",
      "",
      "        # 构建返回数据",
      "        result_items = []",
      "        for item in paginated_result:",
      "            result_items.append(model_to_dict(item))",
      " ",
      "        return paginate_response(result_items, page, page_size, total)",
      "    except Exception as e:",
      "        return error_response(f'服务器内部错误: {str(e)}')",
      "",
      "",
      "# 新增接口",
      "@csrf_exempt",
      "@auth_required('POST')",
      "def create(request):",
      "    try:",
      "        # 解析请求体中的JSON数据",
      "        import json",
      "        try:",
      "            data = json.loads(request.body)",
      "        except json.JSONDecodeError:",
      "            return error_response('请求数据格式错误', 400)",
      " ",
      "        # 获取参数",
      "        name = data.get('name')",
      " ",
      "        # 获取创建者信息",
      "        created_user = data.get('created_user', request.current_user.username if hasattr(request, 'current_user') else None)",
      " ",
      "        # 参数校验",
      "        if not name:",
      "            return error_response('名称不能为空', 400)",
      "",
      "        # 检查数据是否已存在",
      "        if XXX.objects.filter(name=name).exists():",
      "            return error_response('数据已存在', 400)",
      "",
      "        # 创建数据",
      "        result = XXX.objects.create(",
      "            name=name,",
      "            created_user=created_user,",
      "            updated_user=created_user,",
      "        )",
      "",
      "        # 返回成功响应",
      "        result_data = model_to_dict(result)",
      "        return success_response(result_data, '创建成功')",
      "",
      "    except Exception as e:",
      "        return error_response(f'服务器内部错误: {str(e)}')",
      "",
      "",
      "# 更新接口",
      "@csrf_exempt",
      "@auth_required('PUT')",
      "def update(request, id):",
      "    try:",
      "        # 检查是否存在",
      "        try:",
      "            result = XXX.objects.get(id=id)",
      "        except XXX.DoesNotExist:",
      "            return error_response('不存在', 404)",
      "",
      "        # 解析请求体中的JSON数据",
      "        import json",
      "        try:",
      "            data = json.loads(request.body)",
      "        except json.JSONDecodeError:",
      "            return error_response('请求数据格式错误', 400)",
      "",
      "        # 获取参数",
      "        name = data.get('name')",
      "        # 获取更新者信息",
      "        updated_user = data.get('updated_user', request.current_user.username if hasattr(request, 'current_user') else None)",
      "",
      "        # 参数校验",
      "        if not name:",
      "            return error_response('名称不能为空', 400)",
      "",
      "        # 检查名称是否已被其他数据使用",
      "        if XXX.objects.filter(name=name).exclude(id=id).exists():",
      "          return error_response('名称已存在', 400)",
      "",
      "        # 更新基本信息",
      "        result.name = name",
      "        # 设置更新者",
      "        if updated_user is not None:",
      "          result.updated_user = updated_user",
      "        result.save()",
      "",
      "        # 返回成功响应",
      "        result_data = model_to_dict(result)",
      "        return success_response(result_data, '更新成功')",
      "",
      "    except Exception as e:",
      "        return error_response(f'服务器内部错误: {str(e)}')",
      "",
      "",
      "# 获取详情接口",
      "@csrf_exempt",
      "@auth_required('GET')",
      "def detail(request):",
      "    try:",
      "        # 获取ID参数",
      "        id = request.GET.get('id')",
      "        if not id:",
      "            return error_response('缺少参数: id', 400)",
      "        ",
      "        # 检查是否存在",
      "        try:",
      "            result = XXX.objects.get(id=id)",
      "        except XXX.DoesNotExist:",
      "            return error_response('不存在', 404)",
      "",
      "        # 返回详情",
      "        result_data = model_to_dict(result)",
      "",
      "        return success_response(result_data)",
      "",
      "    except Exception as e:",
      "        return error_response(f'服务器内部错误: {str(e)}')",
      "",
      "# 删除接口",
      "@csrf_exempt",
      "@auth_required('DELETE')",
      "def delete(request, id):",
      "    try:",
      "        # 检查是否存在",
      "        try:",
      "            result = XXX.objects.get(id=id)",
      "        except XXX.DoesNotExist:",
      "            return error_response('不存在', 404)",
      "",
      "        # 执行软删除",
      "        result.delete()",
      "",
      "        # 返回成功响应",
      "        return success_response(None, '删除成功')",
      "",
      "    except Exception as e:",
      "        return error_response(f'服务器内部错误: {str(e)}')",
      "",
    ],
  },
}
